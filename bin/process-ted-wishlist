#!/usr/bin/perl
#
# Fetch TED talks from archive.org and upload meta-info and video
# files to for Frikanalen.
#
# To run on Debian, install these packages:
#   perl-modules libwww-mechanize-perl libjson-perl libio-prompter-perl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

use warnings;
use strict;
use File::Basename;
use XML::Simple qw(:strict);
use Data::Dumper;
use WWW::Mechanize;
use JSON;
use IO::Prompter;
use Net::FTP;
use Frikanalen::API;
use Config::Tiny;

use vars qw($username $password);

my $baseurl     = $Frikanalen::API::baseurl;
my $apiurl      = $Frikanalen::API::apiurl;
my $loginurl    = "$apiurl/api-auth/login/?next=/api/";
my $videosurl   = $Frikanalen::API::videosurl;
my $addvideourl = "$baseurl/members/video/new/";
my $tokenurl    = "$apiurl/obtain-token";

# Directory on ftp.frikanalen.tv where files are stored
my $mediadir = "/tank/new_media/media";

my $ftphost = 'ftp.frikanalen.tv';

# Set to 1 to create DV from MPEG
my $recode = 1;

# Set to 1 to upload to ftp site
my $upload = 1;

# use ffmpeg or melt
my $use_ffmpeg = 0;

my $submit_new_video = 1;

my $config = Config::Tiny->read( $ENV{'HOME'} . '/.frikanalen.ini' );
$username = $config->{'auth'}->{'username'} || 'pere';
$password = $config->{'auth'}->{'password'} ||
    prompt("Password for $username:", -echo=>'*', -stdio);

sub get_duration {
    my ($filename) = @_;
    my $duration = undef;
    open(my $fh, "ffprobe $filename 2>&1 |") || die "unable to run ffprobe";
    while (<$fh>) {
        $duration = $1 if (m/Duration: ([\d:.]+), start: .*$/);
    }
    close($fh);
    return $duration;
}

sub load_entries {
    my ($filename) = @_;
    my @entries;
    open(my $fh, "<", $filename) || die "unable to open $filename";
    while (<$fh>) {
        chomp;
        next if m/^#/;
        next if m/^$/;
        push(@entries, $_);
    }
    close($fh);
    return @entries;
}

sub load_meta {
    my ($metafile) = @_;

    my $ref = XMLin($metafile, KeyAttr => [], ForceArray => []);
    return $ref;
}

sub find_ted_with_ref {
    my ($mech, $refurl) =  @_;
    my $ref = { 'id' => undef };
    process_videos(
        sub {
            my ($video, $ref) = @_;
            if ($refurl eq $video->{'ref_url'}) {
                $ref->{'id'} = $video->{'id'};
            }
        },
        $ref, "TED");
    return $ref->{'id'};
}

sub submit_new_video {
    my ($mech, $url, $ref) = @_;

    my $id = find_ted_with_ref($mech, $url);
    if (defined $id) {
        print "info: already registered, skipping submission\n";
        return $id;
    }

    print "info: posting to $videosurl to create video entry\n";

    $mech->get( $loginurl );

    $mech->submit_form(
        form_number => 1,
            fields      => {
            username    => $username, password    => $password,
        }
        );
    # FIXME figure out how to detect when login fail
    print $mech->status(), "\n";

    # FIXME POST via the API did not work, so use the member page form
    # until it work.
    if (1) {
        $mech->get($addvideourl);

#       print Dumper($ref);

        $mech->field('duration', $ref->{'runtime'});
        $mech->field('header', $ref->{'description'} . "\n\n" .
                     "TED talk downloaded from The Internet Archive.");
        $mech->field('name', "TED - " . $ref->{'title'});
        $mech->field('description',
                     "TED talk downloaded from The Internet Archive.");
        $mech->field('ref_url', $url);

        my $form = $mech->current_form();

        # Do not publish before it is manually reviewed
        $form->find_input('publish_on_web')->value(undef);

        # Assume TONO records until manually reviewed
        $form->find_input('has_tono_records')->check();

        # Do not set the filler flagg by default
        $form->find_input('is_filler')->value(undef);

# Use default editor and organization
#    $mech->select('editor', 'pere');
#    $mech->select('organization', 'NUUG');

        # FIXME, figure out way to select using name, not code
        $mech->select('categories', '117'); # Samfunn

        $mech->submit();
    } else {
        # FIXME Use $videosurl.
    }

#    print $mech->content(),"\n";
}
sub ftp_upload {
    my ($ftpsite, $username, $password, $directory, $dvfile, $remotefile) = @_;

    print "info: uploading $dvfile to $ftpsite\n";
    my $ftp = Net::FTP->new($ftpsite, Debug => 0)
        or die "Cannot connect to $ftpsite: $@";
    $ftp->login($username, $password)
        or die "Cannot login ", $ftp->message;
    $ftp->cwd("$directory")
        or die "Cannot change working directory ", $ftp->message;
    $ftp->put($dvfile, $remotefile)
        or die "put failed ", $ftp->message;
    $ftp->quit;
}

sub inject_file {
    my ($filepath, $id, $type) = @_;
    my $targetdir = "$mediadir/$id/$type";
    my $filename = basename($filepath);
    my $targetpath = "$targetdir/$filename";
    if ( ! -d $targetdir ) {
        0 == system("mkdir", "-p", $targetdir)
            or die "unable to create $targetdir";
    }
    if ( ! -d $targetdir ) {
        die "something went wrong when creating $targetdir";
    }
    if ( ! -e $targetpath ) {
        print join(" ", "cp", "-a", $filepath, $targetpath, "\n");
        0 == system("cp", "-a", $filepath, $targetpath)
            or die "unable to copy to $targetpath";
    } else {
        print "File $targetpath already exist.\n";
    }
}

sub find_subtitle {
    my ($mech, $metaref, $langlistref, $basename) = @_;
    my $subtitlefile = undef;
    print "info: Looking for subtitle file.\n";
    for my $lc ( @{$langlistref} ) {
        my $talk_id = $metaref->{'talk_id'};
        my $subtitleurl =
            "http://ted2srt.org/download?tid=$talk_id&type=srt&lang=$lc";
        eval {
            $mech->get($subtitleurl);
            # Ignore HTML redirect, as it isn't a SRT file
            if ("text/plain" eq $mech->ct()) {
                $subtitlefile = "${basename}.$lc.srt";
                open(my $fh, ">", $subtitlefile)
                    || die "unable to write to $subtitlefile";
                print $fh $mech->content();
                close($fh);
                print "info: Found $lc subtitle file on $subtitleurl.\n";
                last;
            }
        } or do {
            print "info: Missing $lc subtext file\n";
        };
    }
    return $subtitlefile;
}

sub process_ted_list {
    my ($listfile) = @_;
    my @entries;
    if ($listfile =~ m/https?:/) {
        push(@entries, $listfile);
    } else {
        @entries = load_entries($listfile);
    }

    my $mech = WWW::Mechanize->new();

    for my $url (@entries) {
        my $basename = basename($url);
        my $durl = $url;
        $durl =~ s%/details/%/download/%;
        my $mpegurl="$durl/$basename.mp4";
        my $mpegfile = basename($mpegurl);
        my $metaurl = "$durl/${basename}_meta.xml";
        my $metafile = basename($metaurl);

        # Fetch video file and meta info
        if ( ! -f $metafile ) {
            print "info: fetching $metaurl\n";
            system("wget", $metaurl);
        } else {
            print "info: not fetching $metaurl, already present\n";
        }
        my $metaref = load_meta($metafile);

        if ( ! -f $mpegfile ) {
            print "info: downloading $mpegurl\n";
            system("wget", $mpegurl);
        } else {
            print "info: not downloading $mpegurl, already present\n";
        }

        # Use more accurate duration from the video file, as the meta
        # info accuracy is only one second, while we want more
        # accurate duration.
        my $duration = get_duration($mpegfile);
        if (defined $duration) {
            $metaref->{'runtime'} = $duration
        }

        if ($submit_new_video) {
            submit_new_video($mech, $url, $metaref);
        }
        my $id = find_ted_with_ref($mech, $url);

        my $subtitlefile =
            find_subtitle($mech, $metaref, ['nb','nn'], $basename);

        my $dvfile = "$basename.dv";
        my $ogvfile = "$basename.ogv";
        if ( $recode) {
            if (-f $mpegfile && ! -f $dvfile ) {
            # Recode to DV
                print "info: recoding from MPEG to DV PAL\n";
                my @cmd;
                if ($use_ffmpeg) {
                    @cmd = ("ffmpeg",
                            "-y",
                            "-i", $mpegfile,
                            "-target", "pal-dv");
                    if (defined $subtitlefile) {
                        push(@cmd, "-vf", "subtitles=$subtitlefile");
                    }
                    push(@cmd, $dvfile);
                } else {
                    @cmd = ("melt",
                            "-profile", "dv_pal_wide",
                            $mpegfile,
                            "-consumer", "avformat:$dvfile");
                }
                my $retval = system(@cmd);
                print "info: exit code $retval / $?\n";
            } else {
                print "info: not recoding, DV file $dvfile already exist\n";
            }
            if ( -f $mpegfile && ! -f $ogvfile ) {
                my @cmd = ('ffmpeg', '-i', $mpegfile,
                           '-v', 'verbose', '-y',
                           '-threads', '8',
                           '-vcodec', 'libtheora',
                           '-acodec', 'libvorbis',
                           '-qscale:v', '2',
                           '-qscale:a', '2',
                           '-vf', 'scale=720:-1',
                           $ogvfile);
                my $retval = system(@cmd);
                print "info: exit code $retval / $?\n";
            }

        }

        if ( -f $dvfile ) {
            if ($id) {
                # Place files in "/home/phed/fkbeta/upload/pere/" on
                # simula or directly in media directory if it is
                # available.
                if ( ! -d $mediadir) { # Assume we are not running on ftp.frikanalen.tv
                    if ($upload) {
                        ftp_upload($ftphost, $username, $password,
                                   $username, $mpegfile, "$id-original-$dvfile");
                        ftp_upload($ftphost, $username, $password,
                                   $username, $dvfile, "$id-broadcast-$dvfile");
                    }
                } else {
                    # Copy files in place instead
                    inject_file($mpegfile, $id, 'original');
                    inject_file($dvfile, $id, 'broadcast');
                    inject_file($ogvfile, $id, 'theora');
                }
            } else {
                print "error: missing ID, not uploading files\n";
            }
        } else {
            print "error: missing DV file $dvfile\n";
        }
    }
}

process_ted_list($ARGV[0] or "ted-wishlist.txt");

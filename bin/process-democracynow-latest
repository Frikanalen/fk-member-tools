#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Fetch RSS from Democracy Now! with latest broadcast
# Figure out if we already got it in Frikanalen
# If not, download video file and register it in Frikanalen as new video entry.
# schedule it at appropriate time.
#
# FIXME Note, this script is not yet working properly

import datetime
import feedparser
import os
import random
import time
import shutil
import grp
from urlparse import urlparse
from subprocess import call

import Frikanalen

# FIXME figure out which source format we want to use
# Based on options from <URL: http://www.democracynow.org/static >
# The web page do not list the RSS links 14:00-15:00 CET, and shortly
# after this updated RSS files with todays broadcast is available.
#rssurl = 'http://www.democracynow.org/podcast-stations-hd-mp4.xml'
#rssurl = 'http://www.democracynow.org/podcast-stations-mpeg.xml'
rssurl = 'http://www.democracynow.org/podcast-stations-mp4.xml'

mediadir = '/tank/new_media/media'

def map_id_to_archiveorg(id):
      """
Make RSS IDs to the entry on archive.org, to have some stable and
unique ID to store in the ref field in Frikanalen.

Rewrite
  http://www.democracynow.org/dn2016-0408-static-mp4
to
  https://archive.org/details/dn2016-0408_vid
"""
      id = id.replace('http://www.democracynow.org/',
                      'https://archive.org/details/')
      id = id.replace('-static-mp4', '_vid')
      return id

def chgrp(path, group):
    """Set group of target path
    """
#    print "chgrp(", path, ",", group, ")"
    try:
        g = grp.getgrnam(group)[2]
    except KeyError:
        raise Exception("unknown group %s" % group)
    try:
        os.chown(path, -1, g)
    except EnvironmentError, e:
        raise Exception("could not change group")

def fix_group_access(path):
    chgrp(path, "fkmedia_rw")

def makedir(dir):
    if not os.path.isdir(dir):
        os.mkdir(dir, 0775)
        os.chmod(dir, 0775) # FIXME figure out why this is needed?  umask?
        fix_group_access(dir)

def main():
      api = Frikanalen.API()
      api.login()

      videos = api.video_find(query="Democracy Now!")
#      videos = api.video_find(query="NUUG")
      vrefs = {}
      for video in videos:
            vrefs[video['ref_url']] = video
#            print video.files()
#      return

      d = feedparser.parse(rssurl)
      # Sort list with oldest first
      d.entries.sort(key=lambda entry: entry.published_parsed)

      for entry in d.entries:
            ref_url = map_id_to_archiveorg(entry['id'])
            if ref_url in vrefs:
                  print "warning: alrady uploaded %s to Frikanalen" % ref_url
                  if 0 < len(vrefs[ref_url].files()):
                        print "info: already got files uploaded, skip."
                        continue                        
                  else:
                        print "info: entry missing files, should upload anyway."
                        video = vrefs[ref_url]
            else:
                  video = None
            for link in entry['links']:
                  if 'enclosure' == link['rel']:
                        videourl = link['href']
            print videourl
            o = urlparse(videourl)
            videofile = os.path.basename(o.path)

            if not os.path.exists(videofile):
                  print "info: downloading %s to %s" % (videourl, videofile)
                  if True:
                        call(["wget", "--quiet", "-O", videofile, videourl])
                        duration = Frikanalen.Video.extract_videofile_duration(videofile)
                  else:
                        # FIXME hack while wget is disabled during development.
                        if duration is None:
                              duration = "0:0"

            else:
                  print "info: not downloading %s, already present" % videourl

            if video is None:
                  pdate = time.strftime("%d. %B %Y", entry['published_parsed'])

                  videoinfo = {
                        'name'             : 'Democracy Now! %s' % pdate,
                        'header'           : '',
                        'duration'         : duration,
                        
                        'has_tono_records' : False,
                        'publish_on_web'   : True,
                        'is_filler'        : False,
                        'ref_url'          : ref_url,

                        'organization'     : 'Bevegelsen for sosialisme',
                        'editor'           : 'otelles',
                  
                        'categories'       : [ 'Samfunn' ],
                        }
                  print videoinfo
                  print

                  video = api.video_new(videoinfo)

            # Move downloaded file into place
            origdir = "%s/%d/original" % (mediadir, video.id)
            newpath = "%s/%s" % (origdir, videofile)
            print "moving %s\nto %s" %(videofile, origdir)
            makedir("%s/%s" % ( mediadir, video.id))
            makedir(origdir)
            shutil.move(videofile, newpath)
            fix_group_access(newpath)
            apipath = origdir.replace("%s/" % mediadir, "")

            # Syntesize thumbnails and video files
            call(['/tank/pere/fk-member-tools/generate-missing-jpeg', str(video.id)])
            call(['/tank/pere/fk-member-tools/generate-missing-ogv', str(video.id)])

            # Register file using API
            # FIXME make this non-interactive
            if True:
                  call([os.path.expanduser('~pere/frikanalen/utils/videofiles-update'), str(video.id)])
            else:
                  f = Videofile.new(video.id, apipath, "original")
                  video.addfile(f)

            # Scheduling is done elsewhere, by the automatic scheduling system

if __name__=="__main__":
      main()

#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2018 Petter Reinholdtsen <pere@hungry.com>
# This file is covered by the GPLv2 or later, read COPYING for details.

import argparse
import json
import math
import os
import requests
import sys

import Frikanalen

upload_url = "https://upload.frikanalen.no/upload"


def get_upload_token(api, video_id):
    global upload_url
    url = "%s/videos/%d/upload_token" % (api.apiurl, video_id)
    api.mech.open(url)
    jsonstr = api.mech.response().read()
    j = json.loads(jsonstr.decode('UTF-8'))
    if 'upload_url' in j:
        upload_url = j['upload_url']
    return j['upload_token']


def send_chunk(video_id, upload_token, filename, chunk_data, chunk=None, chunks=None):
    multipart_form_data = {
        'name': (None, filename),
        'video_id': (None, str(video_id)),
        'upload_token': (None, upload_token),
        # Note, the filename in this field seem to be required but ignored
        'file': (filename, chunk_data),
    }
    if chunk is not None:
        multipart_form_data['chunk'] = (None, str(chunk))
        multipart_form_data['chunks'] = (None, str(chunks))
    response = requests.post(upload_url, files=multipart_form_data)
    j = json.loads(response.content.decode('UTF-8'))
    if 'error' in j:
        raise Exception("Failed to post chunk %d of %d chunks" % (chunk, chunks))


def upload(args, api, video_id, filepath):
    upload_token = get_upload_token(api, video_id)
    chunk_size = 1 * 1024 * 1024 # 1 MiB
    size = os.path.getsize(filepath)
    filename = os.path.basename(filepath)
    if size <= chunk_size:
        data = open(filepath, 'rb')
        send_chunk(video_id, upload_token, filename, data)
    else:
        f = open(filepath, 'rb')
        chunk = 0
        chunks = int(math.ceil(size*1.0 / chunk_size))
        if args.progress:
            from tqdm import tqdm
            pbar = tqdm(total=100, unit='B', unit_scale=True)
        try:
            while chunk < chunks:
                chunk_data = f.read(chunk_size)
                if args.progress:
                    pbar.update(len(chunk_data))
                send_chunk(video_id, upload_token, filename, chunk_data, chunk, chunks)
                chunk = chunk + 1
        finally:
            if args.progress:
                pbar.close()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--progress", help='show upload progress inforamtion',
                        action='store_true')
    parser.add_argument("--verbose", help='make script more verbose',
                        action='store_true')
    parser.add_argument("filepath", help='path to video file to upload')
    parser.add_argument("video_id", type=int, help='video ID to attach file to')
    args = parser.parse_args()
    
    api = Frikanalen.API()
    api.login()
    upload(args, api, args.video_id, args.filepath)


if '__main__' == __name__:
    main()
